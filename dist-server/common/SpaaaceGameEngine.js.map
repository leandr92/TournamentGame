{"version":3,"sources":["../../src/common/SpaaaceGameEngine.js"],"names":["SpaaaceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","type","collisionDistance","serializer","registerClass","Ship","Missile","worldWrap","width","height","on","e","collisionObjects","Object","keys","map","k","ship","find","o","missile","playerId","destroyMissile","id","trace","info","emit","reduceVisibleThrust","bind","inputData","isServer","playerShip","world","queryObject","instanceType","input","value","Number","rad","angle","Math","PI","dv","TwoVector","cos","sin","multiplyScalar","position","x","y","showThrust","turnRight","turnLeft","makeMissile","messageIndex","newShipX","floor","random","worldSettings","newShipY","addObjectToWorld","console","log","toString","inputId","copy","velocity","ownerId","obj","timer","add","missileId","objects","removeObjectFromWorld","postStepEv","isReenact","ships","queryObjects","forEach","isInteger","GameEngine"],"mappings":"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","sourcesContent":["import { SimplePhysicsEngine, GameEngine, TwoVector } from 'lance-gg';\r\nimport Ship from './Ship';\r\nimport Missile from './Missile';\r\n\r\nexport default class SpaaaceGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n        this.physicsEngine = new SimplePhysicsEngine({\r\n            gameEngine: this,\r\n            collisions: {\r\n                type: 'brute',\r\n                collisionDistance: 28\r\n            }\r\n        });\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Ship);\r\n        serializer.registerClass(Missile);\r\n    }\r\n\r\n    initWorld() {\r\n        super.initWorld({\r\n            worldWrap: true,\r\n            width: 3000,\r\n            height: 3000\r\n        });\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n\r\n        this.on('collisionStart', e => {\r\n            let collisionObjects = Object.keys(e).map(k => e[k]);\r\n            let ship = collisionObjects.find(o => o instanceof Ship);\r\n            let missile = collisionObjects.find(o => o instanceof Missile);\r\n\r\n            if (!ship || !missile)\r\n                return;\r\n\r\n            // make sure not to process the collision between a missile and the ship that fired it\r\n            if (missile.playerId !== ship.playerId) {\r\n                this.destroyMissile(missile.id);\r\n                this.trace.info(() => `missile by ship=${missile.playerId} hit ship=${ship.id}`);\r\n                this.emit('missileHit', { missile, ship });\r\n            }\r\n        });\r\n\r\n        this.on('postStep', this.reduceVisibleThrust.bind(this));\r\n    };\r\n\r\n    processInput(inputData, playerId, isServer) {\r\n\r\n        super.processInput(inputData, playerId);\r\n\r\n        // get the player ship tied to the player socket\r\n        let playerShip = this.world.queryObject({\r\n            playerId: playerId,\r\n            instanceType: Ship\r\n        });\r\n\r\n        if (playerShip) {\r\n            if (inputData.input == 'up') {\r\n\r\n                var value = 0.05;\r\n\r\n                if (inputData.value != null) {\r\n                    value = Number(inputData.value);\r\n                }\r\n\r\n                let rad = playerShip.angle * (Math.PI / 180);\r\n                let dv = new TwoVector(Math.cos(rad), Math.sin(rad));\r\n                dv.multiplyScalar(value * 30);\r\n                playerShip.position.x += dv.x;\r\n                playerShip.position.y += dv.y;\r\n\r\n                //playerShip.accelerate(value);\r\n                playerShip.showThrust = 5; // show thrust for next steps.\r\n\r\n            } else if (inputData.input == 'right') {\r\n\r\n                value = 2.5;\r\n\r\n                if (inputData.value != null) {\r\n                    value = Number(inputData.value);\r\n                }\r\n\r\n                playerShip.turnRight(value);\r\n            } else if (inputData.input == 'left') {\r\n\r\n                value = 2.5;\r\n\r\n                if (inputData.value != null) {\r\n                    value = Number(inputData.value);\r\n                }\r\n\r\n                playerShip.turnLeft(value);\r\n\r\n            } else if (inputData.input == 'space') {\r\n                this.makeMissile(playerShip, inputData.messageIndex);\r\n                this.emit('fireMissile');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Makes a new ship, places it randomly and adds it to the game world\r\n    makeShip(playerId) {\r\n        let newShipX = Math.floor(Math.random() * (this.worldSettings.width - 200)) + 200;\r\n        let newShipY = Math.floor(Math.random() * (this.worldSettings.height - 200)) + 200;\r\n\r\n        let ship = new Ship(this, null, {\r\n            position: new TwoVector(newShipX, newShipY)\r\n        });\r\n\r\n        ship.playerId = playerId;\r\n        this.addObjectToWorld(ship);\r\n        console.log(`ship added: ${ship.toString()}`);\r\n\r\n        return ship;\r\n    };\r\n\r\n    makeMissile(playerShip, inputId) {\r\n        let missile = new Missile(this);\r\n\r\n        // we want the missile location and velocity to correspond to that of the ship firing it\r\n        missile.position.copy(playerShip.position);\r\n        missile.velocity.copy(playerShip.velocity);\r\n        missile.angle = playerShip.angle;\r\n        missile.playerId = playerShip.playerId;\r\n        missile.ownerId = playerShip.id;\r\n        missile.inputId = inputId; // this enables usage of the missile shadow object\r\n        missile.velocity.x += Math.cos(missile.angle * (Math.PI / 180)) * 10;\r\n        missile.velocity.y += Math.sin(missile.angle * (Math.PI / 180)) * 10;\r\n\r\n        this.trace.trace(() => `missile[${missile.id}] created vel=${missile.velocity}`);\r\n\r\n        let obj = this.addObjectToWorld(missile);\r\n\r\n        // if the object was added successfully to the game world, destroy the missile after some game ticks\r\n        if (obj)\r\n            this.timer.add(30, this.destroyMissile, this, [obj.id]);\r\n\r\n        return missile;\r\n    }\r\n\r\n    // destroy the missile if it still exists\r\n    destroyMissile(missileId) {\r\n        if (this.world.objects[missileId]) {\r\n            this.trace.trace(() => `missile[${missileId}] destroyed`);\r\n            this.removeObjectFromWorld(missileId);\r\n        }\r\n    }\r\n\r\n    // at the end of the step, reduce the thrust for all objects\r\n    reduceVisibleThrust(postStepEv) {\r\n        if (postStepEv.isReenact)\r\n            return;\r\n\r\n        let ships = this.world.queryObjects({\r\n            instanceType: Ship\r\n        });\r\n\r\n        ships.forEach(ship => {\r\n            if (Number.isInteger(ship.showThrust) && ship.showThrust >= 1)\r\n                ship.showThrust--;\r\n        });\r\n    }\r\n}"],"file":"SpaaaceGameEngine.js"}